generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



enum AccountState {
  premium
  uncompleted
}

model User {
  id                     String                  @id @default(uuid())
  name                   String?
  role                   UserRole                @default(user)
  email                  String                  @unique
  legalName              String?
  lastName               String?
  secondLastName         String?
  accountState           AccountState            @default(uncompleted)
  money                  Float                  @default(0.00)
  nacionality            String?
  dateOfBirth            DateTime?
  phone                  String?
  emailVerified          DateTime?
  password               String?
  image                  String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  accounts               Account[]
  gender                 Gender?
  identificationDocument IdentificationDocument?
  taxResidence           TaxResidence?
}

model TaxResidence {
  id                 String @id @default(uuid())
  country            String
  residentialAddress String
  fiscalNumber       String
  usPerson           Boolean?
  eeuuTin            String
  postalCode         Int
  city               String
  userId             String @unique
  user               User   @relation(fields: [userId], references: [id])
}

model IdentificationDocument {
  id             String @id @default(uuid())
  documentType   String
  documentNumber String
  frontSideImage String
  backSideImage  String
  city           String
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id])
}

enum Gender {
  male
  female
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

enum UserRole {
  admin
  user
}
